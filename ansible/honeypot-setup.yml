---
- name: Configure SOCaaS Honeypot
  hosts: honeypot
  become: yes
  vars:
    monitor_script_path: /opt/security_monitor.py
    dashboard_path: /var/www/html/dashboard.html

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - python3
          - python3-pip
          - fail2ban
          - nginx
          - jq
        state: present

    - name: Install Python requirements
      pip:
        name:
          - requests
          - boto3
        executable: pip3

    - name: Create security monitoring script
      copy:
        content: |
          #!/usr/bin/env python3
          import json
          import subprocess
          import time
          from datetime import datetime
          import os

          def get_ssh_attempts():
              try:
                  result = subprocess.run(
                      ['journalctl', '-u', 'ssh', '--since', '1 hour ago', '-o', 'json'],
                      capture_output=True, text=True
                  )
                  lines = result.stdout.strip().split('\n')
                  failed_attempts = []
                  
                  for line in lines:
                      if line:
                          try:
                              log_entry = json.loads(line)
                              message = log_entry.get('MESSAGE', '')
                              if 'Failed password' in message or 'Invalid user' in message:
                                  failed_attempts.append({
                                      'timestamp': log_entry.get('__REALTIME_TIMESTAMP', ''),
                                      'message': message,
                                      'host': log_entry.get('_HOSTNAME', '')
                                  })
                          except json.JSONDecodeError:
                              continue
                  
                  return failed_attempts
              except Exception as e:
                  return {'error': str(e)}

          def generate_dashboard(attempts):
              html_template = '''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>SOCaaS Security Dashboard</title>
                  <style>
                      body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                      .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                      .header { background: #2c3e50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
                      .metric { background: #3498db; color: white; padding: 20px; margin: 10px; border-radius: 8px; display: inline-block; width: 200px; text-align: center; }
                      .attempt { background: #e74c3c; color: white; padding: 15px; margin: 10px 0; border-radius: 5px; }
                      .timestamp { font-size: 0.8em; opacity: 0.8; }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <div class="header">
                          <h1>üõ°Ô∏è SOCaaS Security Dashboard</h1>
                          <p>Real-time Security Monitoring</p>
                      </div>
                      
                      <div class="metrics">
                          <div class="metric">
                              <h3>SSH Attempts</h3>
                              <h2>{{ attempt_count }}</h2>
                          </div>
                      </div>

                      <h2>Recent Security Events</h2>
                      {% for attempt in attempts %}
                      <div class="attempt">
                          <strong>{{ attempt.message }}</strong>
                          <div class="timestamp">{{ datetime.fromtimestamp(attempt.timestamp/1000000).strftime('%Y-%m-%d %H:%M:%S') }}</div>
                      </div>
                      {% endfor %}
                  </div>
              </body>
              </html>
              '''
              
              # Simple template replacement
              html = html_template.replace('{{ attempt_count }}', str(len(attempts)))
              
              # For now, we'll just log the attempts
              with open('/var/log/security_events.log', 'a') as f:
                  for attempt in attempts[-10:]:  # Last 10 attempts
                      f.write(f"{datetime.now().isoformat()} - {attempt}\n")
              
              return html

          if __name__ == "__main__":
              while True:
                  attempts = get_ssh_attempts()
                  print(f"Found {len(attempts)} SSH attempts in the last hour")
                  
                  # In a real scenario, we'd send this to a SIEM
                  # For now, we'll just log it
                  with open('/var/log/ssh_monitor.log', 'a') as f:
                      f.write(f"{datetime.now().isoformat()}: {len(attempts)} attempts\n")
                  
                  time.sleep(300)  # Check every 5 minutes
        dest: "{{ monitor_script_path }}"
        mode: '0755'

    - name: Create systemd service for security monitor
      copy:
        content: |
          [Unit]
          Description=SOCaaS Security Monitor
          After=network.target

          [Service]
          Type=simple
          User=root
          ExecStart=/usr/bin/python3 {{ monitor_script_path }}
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/security-monitor.service

    - name: Enable and start security monitor service
      systemd:
        name: security-monitor
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Ensure nginx is running
      service:
        name: nginx
        state: started
        enabled: yes

  handlers:
    - name: restart security monitor
      systemd:
        name: security-monitor
        state: restarted
